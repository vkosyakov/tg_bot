import logging
import traceback
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from data.menu import menu_items

logger = logging.getLogger(__name__)


def get_main_menu_keyboard():
    """Return the main menu keyboard."""
    keyboard = [
        [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data='menu')],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='cart')]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_cart_total(cart):
    """Calculate the total price of items in the cart."""
    if not cart:
        logger.warning("[DEBUG] –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã")
        return 0

    total = 0
    for item_id, quantity in cart.items():
        if item_id in menu_items:
            item = menu_items[item_id]
            total += item['price'] * quantity
        else:
            logger.warning(f"[DEBUG] –¢–æ–≤–∞—Ä —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ–Ω—é –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—É–º–º—ã")
    return total


def format_cart_text(cart):
    """Format the cart contents as a text message."""
    if not cart:
        logger.info("[DEBUG] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã")
        return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."

    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0

    for item_id, quantity in cart.items():
        if item_id in menu_items:
            item = menu_items[item_id]
            item_total = item['price'] * quantity
            total += item_total
            cart_text += f"{item['name']} x{quantity} = {item_total}‚ÇΩ\n"
        else:
            logger.warning(f"[DEBUG] –¢–æ–≤–∞—Ä —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ–Ω—é –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã")
            cart_text += f"[–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä] x{quantity}\n"

    cart_text += f"\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    return cart_text


def get_order_text(cart, phone, address, order_id=None):
    """Format order information as text."""
    try:
        logger.info(f"[DEBUG] –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞. –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {len(cart) if cart else 0}")
        logger.info(f"[DEBUG] –¢–µ–ª–µ—Ñ–æ–Ω: {phone}, –ê–¥—Ä–µ—Å: {address}, ID –∑–∞–∫–∞–∑–∞: {order_id}")

        if not cart:
            logger.warning("[DEBUG] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞ —Å –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π")
            return "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑."

        order_text = "üìù –ó–∞–∫–∞–∑:\n\n"
        total = 0
        item_count = 0

        for item_id, quantity in cart.items():
            if item_id in menu_items:
                item = menu_items[item_id]
                item_total = item['price'] * quantity
                total += item_total
                order_text += f"{item['name']} x{quantity} = {item_total}‚ÇΩ\n"
                item_count += 1
            else:
                logger.warning(f"[DEBUG] –¢–æ–≤–∞—Ä —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ–Ω—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞")
                order_text += f"[–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä] x{quantity}\n"

        logger.info(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {item_count}, –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total}‚ÇΩ")

        order_text += f"\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n"

        if not phone:
            logger.warning("[DEBUG] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
            phone = "–ù–µ —É–∫–∞–∑–∞–Ω"

        if not address:
            logger.warning("[DEBUG] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–¥—Ä–µ—Å –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
            address = "–ù–µ —É–∫–∞–∑–∞–Ω"

        order_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        order_text += f"–ê–¥—Ä–µ—Å: {address}\n"

        if order_id:
            order_text += f"\nID –∑–∞–∫–∞–∑–∞: {order_id}"

        logger.info(f"[DEBUG] –¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(order_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return order_text

    except Exception as e:
        logger.error(f"[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞: {e}")
        logger.error(traceback.format_exc())
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def generate_order_id():
    """Generate a unique order ID."""
    import time
    order_id = str(int(time.time()))
    logger.info(f"[DEBUG] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ID –∑–∞–∫–∞–∑–∞: {order_id}")
    return order_id

