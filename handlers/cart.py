from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from data.menu import menu_items
from config import MENU, CART
from utils.helpers import format_cart_text
import logging

logger = logging.getLogger(__name__)


async def cart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle cart operations."""
    query = update.callback_query

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
    if query:
        await query.answer()

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã. –î–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã: {context.user_data.get('cart', {})}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if 'cart' not in context.user_data:
            context.user_data['cart'] = {}

        if not context.user_data.get('cart'):
            # Cart is empty
            try:
                await query.edit_message_text(
                    "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
                    ])
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await query.message.reply_text(
                    "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
                    ])
                )

            return MENU

        # Display cart contents
        cart_text = format_cart_text(context.user_data['cart'])

        keyboard = []
        for item_id, quantity in context.user_data['cart'].items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –≤ –º–µ–Ω—é
            if item_id in menu_items:
                item = menu_items[item_id]
                keyboard.append([
                    InlineKeyboardButton(f"‚ûñ {item['name']}", callback_data=f'remove_{item_id}'),
                    InlineKeyboardButton(f"‚ûï {item['name']}", callback_data=f'add_{item_id}')
                ])
            else:
                logger.warning(f"–¢–æ–≤–∞—Ä —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ–Ω—é")

        keyboard.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart')])
        keyboard.append([InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='checkout')])
        keyboard.append([InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')])

        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await query.edit_message_text(cart_text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await query.message.reply_text(cart_text, reply_markup=reply_markup)

        return CART

    return CART


async def cart_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle updates to the cart."""
    from handlers.menu import menu_handler
    from handlers.checkout import checkout_handler

    query = update.callback_query

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
    if query:
        await query.answer()

        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã: {query.data}")

        if query.data.startswith('add_'):
            parts = query.data.split('_')
            if len(parts) >= 2:
                item_id = '_'.join(parts[1:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –≤ id –µ—Å—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è

                if 'cart' not in context.user_data:
                    context.user_data['cart'] = {}

                if item_id in context.user_data['cart']:
                    context.user_data['cart'][item_id] += 1
                else:
                    context.user_data['cart'][item_id] = 1

                logger.info(f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {item_id}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {context.user_data['cart'][item_id]}")

            # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã
            return await cart_handler(update, context)

        elif query.data.startswith('remove_'):
            parts = query.data.split('_')
            if len(parts) >= 2:
                item_id = '_'.join(parts[1:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –≤ id –µ—Å—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è

                if 'cart' in context.user_data and item_id in context.user_data['cart']:
                    if context.user_data['cart'][item_id] > 1:
                        context.user_data['cart'][item_id] -= 1
                        logger.info(
                            f"–£–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item_id}, –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {context.user_data['cart'][item_id]}")
                    else:
                        del context.user_data['cart'][item_id]
                        logger.info(f"–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {item_id}")

            # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã
            return await cart_handler(update, context)

        elif query.data == 'clear_cart':
            context.user_data['cart'] = {}
            logger.info("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")

            try:
                await query.edit_message_text(
                    "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
                    ])
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await query.message.reply_text(
                    "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
                    ])
                )

            return MENU

        elif query.data == 'checkout':
            return await checkout_handler(update, context)

        elif query.data == 'menu':
            return await menu_handler(update, context)

    # Update cart display
    return await cart_handler(update, context)
