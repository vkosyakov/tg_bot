from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from data.menu import menu_items, categories
from config import MENU
from utils.helpers import get_main_menu_keyboard
import logging

logger = logging.getLogger(__name__)


async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle menu navigation and item selection."""
    query = update.callback_query

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
    if query:
        await query.answer()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data}")

        if query.data == 'menu':
            # Show menu categories
            keyboard = []
            for category_id, category_name in categories.items():
                keyboard.append([InlineKeyboardButton(category_name, callback_data=f'category_{category_id}')])

            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)

            return MENU

        elif query.data.startswith('category_'):
            category = query.data.split('_')[1]
            # Show items in the selected category
            keyboard = []
            for item_id, item_data in menu_items.items():
                if item_id.startswith(category):
                    keyboard.append([InlineKeyboardButton(
                        f"{item_data['name']} - {item_data['price']}‚ÇΩ",
                        callback_data=f'item_{item_id}'
                    )])

            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='menu')])
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await query.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=reply_markup)

            return MENU

        elif query.data.startswith('item_'):
            item_id = query.data.split('_', 1)[1]
            item = menu_items[item_id]

            # Show item details with add to cart option
            keyboard = [
                [InlineKeyboardButton("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f'add_to_cart_{item_id}')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data='menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                await query.edit_message_text(
                    f"*{item['name']}*\n"
                    f"–¶–µ–Ω–∞: {item['price']}‚ÇΩ\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await query.message.reply_text(
                    f"*{item['name']}*\n"
                    f"–¶–µ–Ω–∞: {item['price']}‚ÇΩ\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )

            return MENU

        elif query.data.startswith('add_to_cart_'):
            # –í–∞–∂–Ω–æ: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∂—ë—Å—Ç–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã –≤ split
            parts = query.data.split('_')
            if len(parts) >= 4:
                item_id = '_'.join(parts[3:])  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –≤ id –µ—Å—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
            else:
                item_id = parts[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç

            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É: {item_id}")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if 'cart' not in context.user_data:
                context.user_data['cart'] = {}

            # Add item to cart
            if item_id in context.user_data['cart']:
                context.user_data['cart'][item_id] += 1
            else:
                context.user_data['cart'][item_id] = 1

            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {context.user_data['cart']}")

            try:
                await query.edit_message_text(
                    f"{menu_items[item_id]['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data='cart')],
                        [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
                    ])
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await query.message.reply_text(
                    f"{menu_items[item_id]['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data='cart')],
                        [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
                    ])
                )

            return MENU

        elif query.data == 'back_to_main':
            # Go back to main menu
            try:
                await query.edit_message_text(
                    "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?",
                    reply_markup=get_main_menu_keyboard()
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await query.message.reply_text(
                    "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?",
                    reply_markup=get_main_menu_keyboard()
                )

            return MENU
    return MENU

