import logging
import traceback
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from config import MENU, PAYMENT, ADMIN_GROUP_ID
from utils.helpers import get_main_menu_keyboard, get_cart_total
from utils.database import get_order, update_order_status

logger = logging.getLogger(__name__)


async def payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle payment processing."""
    query = update.callback_query
    await query.answer()

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: {query.data}")

    if query.data.startswith('pay_'):
        order_id = query.data.split('_')[1]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order_data = get_order(order_id)

        if not order_data:
            await query.edit_message_text(
                "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
                ])
            )
            return MENU

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        total = get_cart_total(order_data.get('cart', {}))

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É" (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
        payment_link = f"https://vkosyakov.github.io/skills-github-pages/   ?order={order_id}&amount={total}"

        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        keyboard = [
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑", callback_data=f'payment_complete_{order_id}')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f'cancel_order_{order_id}')]
        ]

        await query.edit_message_text(
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ {total}‚ÇΩ.\n\n"
            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_link}\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑'.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        return PAYMENT

    elif query.data == 'cancel_payment':
        await query.edit_message_text(
            "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
            ])
        )
        return MENU

    return PAYMENT


async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process payment completion."""
    query = update.callback_query
    await query.answer()

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {query.data}")

    if query.data.startswith('payment_complete_'):
        order_id = query.data.split('_')[2]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order_data = get_order(order_id)

        if not order_data:
            await query.edit_message_text(
                "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
                ])
            )
            return MENU

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order_data['status'] = 'paid'
        update_order_status(order_id, 'paid')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.edit_message_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –∫—É—Ö–Ω—é –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
            ])
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            # –ù–∞—Ö–æ–¥–∏–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –∞–¥–º–∏–Ω–æ–≤
            admin_message_info = next(
                (msg for msg in order_data.get('message_ids', []) if str(msg.get('chat_id')) == str(ADMIN_GROUP_ID)),
                None
            )

            if admin_message_info:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –∞–¥–º–∏–Ω–æ–≤
                await context.bot.edit_message_text(
                    chat_id=admin_message_info['chat_id'],
                    message_id=admin_message_info['message_id'],
                    text=f"üí∞ –ó–ê–ö–ê–ó –û–ü–õ–ê–ß–ï–ù üí∞\n\n"
                         f"ID –∑–∞–∫–∞–∑–∞: {order_id}\n"
                         f"–ö–ª–∏–µ–Ω—Ç: {order_data.get('full_name')}"
                         f"{' (@' + order_data.get('username') + ')' if order_data.get('username') else ''}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üç≥ –ù–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å", callback_data=f'admin_preparing_{order_id}')]
                    ])
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await context.bot.send_message(
                    chat_id=ADMIN_GROUP_ID,
                    text=f"üí∞ –ó–ê–ö–ê–ó –û–ü–õ–ê–ß–ï–ù üí∞\n\n"
                         f"ID –∑–∞–∫–∞–∑–∞: {order_id}\n"
                         f"–ö–ª–∏–µ–Ω—Ç: {order_data.get('full_name')}"
                         f"{' (@' + order_data.get('username') + ')' if order_data.get('username') else ''}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üç≥ –ù–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å", callback_data=f'admin_preparing_{order_id}')]
                    ])
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞: {e}")
            logger.error(traceback.format_exc())

        return MENU

    return PAYMENT