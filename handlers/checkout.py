import logging
import traceback
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from config import MENU, PHONE, ADDRESS, CONFIRMATION, PAYMENT, ORDER_STATUS, ADMIN_GROUP_ID
from utils.helpers import get_order_text, generate_order_id, get_main_menu_keyboard
from utils.database import save_order, update_order_status

logger = logging.getLogger(__name__)


async def checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle checkout process."""
    query = update.callback_query
    await query.answer()

    logger.info("–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

    if not context.user_data.get('cart') or not context.user_data['cart']:
        await query.edit_message_text(
            "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
            ])
        )
        return MENU

    reply_markup = ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑']], one_time_keyboard=True)
    await query.edit_message_text(
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX",
        reply_markup=InlineKeyboardMarkup([])
    )

    await update.effective_message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=reply_markup
    )

    return PHONE


async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle phone number input."""
    from handlers.start import start

    if update.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑':
        await update.message.reply_text(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=ReplyKeyboardRemove()
        )
        return await start(update, context)

    # Basic phone validation
    phone = update.message.text.strip()
    if not (phone.startswith('+7') and len(phone) == 12 and phone[1:].isdigit()):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX"
        )
        return PHONE

    # Save phone number
    context.user_data['phone'] = phone
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")

    # Ask for address
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑']], one_time_keyboard=True)
    )

    return ADDRESS


async def address_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle address input."""
    from handlers.start import start

    if update.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑':
        await update.message.reply_text(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=ReplyKeyboardRemove()
        )
        return await start(update, context)

    # Save address
    address = update.message.text.strip()
    if len(address) < 5:
        await update.message.reply_text(
            "–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏."
        )
        return ADDRESS

    context.user_data['address'] = address
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –∞–¥—Ä–µ—Å: {address}")

    # Show order summary
    order_text = get_order_text(
        context.user_data['cart'],
        context.user_data['phone'],
        context.user_data['address']
    )

    order_text += "\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?"

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_order')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_order')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        order_text,
        reply_markup=reply_markup
    )

    return CONFIRMATION


async def confirmation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle order confirmation."""
    query = update.callback_query
    await query.answer()

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {query.data}")

    if query.data == 'cancel_order':
        await query.edit_message_text(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
            ])
        )
        return MENU

    elif query.data == 'confirm_order':
        try:
            # Generate order ID
            order_id = generate_order_id()
            context.user_data['current_order_id'] = order_id
            logger.info(f"–°–æ–∑–¥–∞–Ω ID –∑–∞–∫–∞–∑–∞: {order_id}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            user = update.effective_user
            order_data = {
                'user_id': user.id,
                'username': user.username,
                'full_name': user.full_name,
                'cart': context.user_data['cart'],
                'phone': context.user_data['phone'],
                'address': context.user_data['address'],
                'status': 'pending',
                'message_ids': [],  # ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                'timestamp': int(order_id)
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            save_order(order_id, order_data)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bot_data –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            context.bot_data.setdefault('orders', {})
            context.bot_data['orders'][order_id] = order_data

            # Prepare order message for admin group
            order_text = "üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó üÜï\n\n"
            order_text += get_order_text(
                context.user_data['cart'],
                context.user_data['phone'],
                context.user_data['address'],
                order_id
            )

            # Add user info
            if user.username:
                order_text += f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username})"
            else:
                order_text += f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}"

            # Create approval buttons
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'admin_approve_{order_id}'),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'admin_reject_{order_id}')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # Determine target chat ID
            target_chat_id = ADMIN_GROUP_ID
            if ADMIN_GROUP_ID == "REPLACE_WITH_YOUR_GROUP_ID" or not ADMIN_GROUP_ID.startswith('-'):
                logger.warning("ADMIN_GROUP_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å–∞–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                target_chat_id = update.effective_user.id

            # Send to admin group
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ —á–∞—Ç {target_chat_id}")
            admin_message = await context.bot.send_message(
                chat_id=target_chat_id,
                text=order_text,
                reply_markup=reply_markup
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            order_data['message_ids'].append({
                'chat_id': target_chat_id,
                'message_id': admin_message.message_id
            })
            save_order(order_id, order_data)

            # Notify user about successful order
            success_message = (
                "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!"
            )

            await query.edit_message_text(success_message)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
            cancel_keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f'cancel_order_{order_id}')]
            ]
            cancel_markup = InlineKeyboardMarkup(cancel_keyboard)

            status_message = await query.message.reply_text(
                f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                f"ID –∑–∞–∫–∞–∑–∞: {order_id}",
                reply_markup=cancel_markup
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            order_data['message_ids'].append({
                'chat_id': user.id,
                'message_id': status_message.message_id
            })
            save_order(order_id, order_data)

            # Clear the cart
            context.user_data['cart'] = {}

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await send_main_menu(context.bot, update.effective_user.id)

            return ORDER_STATUS

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
            logger.error(traceback.format_exc())

            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
                ])
            )

            return MENU


async def send_main_menu(bot, user_id):
    """Send main menu to user."""
    try:
        await bot.send_message(
            chat_id=user_id,
            text="–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=get_main_menu_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        logger.error(traceback.format_exc())
